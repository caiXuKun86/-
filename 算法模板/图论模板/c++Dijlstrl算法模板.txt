#include<iostream>
using namespace std;
#include<vector>
#include<queue>
#include<cstring>
struct qnode{
	int v,dist;
	friend bool operator<(qnode a,qnode b){
		return a.dist>b.dist;
	}
};
const int N=10010;
const int M=50010;
int n,m;
int s,e;

priority_queue<qnode>q;
vector<vector<pair<int,int> > >g(N);

int dist[N];
int vis[N];
int main(){
	cin>>n>>m;
	cin>>s>>e;
	for(int i=0,a,b,c;i<m;i++){
		cin>>a>>b>>c;
		g[a].push_back({b,c});
		g[b].push_back({a,c});
	}
	memset(dist,0x7f,sizeof dist);
	q.push({s,0});
	dist[s]=0;
	while(!q.empty()){
		auto cur=q.top();
		q.pop();
		int v=cur.v;
		int dist=cur.dist;
		if(v==e){
			cout<<cost<<endl;
			return 0;
		}
		if(vis[v])continue;
		vis[v]=true;
		for(auto edge:g[v]){
			if(!vis[edge.first]&&cost+edge.second<dist[edge.first]){
				dist[edge.first]=cost+edge.second;
				q.push({edge.first,cost+edge.second});
				
			}
		}
		
	}
	cout<<-1<<endl;
	return 0;
	
	
}