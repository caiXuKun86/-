#include<iostream>
#include<queue>
#include<string>

using namespace std;

struct node{
	int weight;
	char data;
	
	node*lchild;
	node*rchild;
};

struct Compare {
    bool operator()(node* l, node* r) {
        return l->weight > r->weight;
    }
};

priority_queue<node*,vector<node*>,Compare> q;

node* mergeNode(node* a,node* b){
	
	node*s=new node;
	s->data='#';
	s->lchild=a;
	s->rchild=b;
	s->weight=a->weight+b->weight;
	
	return s;
}
string path;
void dfs(node*root){

	if(root->data!='#'){
		cout<<root->data<<"     "<<path<<endl;
		return;
	}
	
	path.push_back('0');
	dfs(root->lchild);
	path.pop_back();
	
	path.push_back('1');
	dfs(root->rchild);
	path.pop_back();
}

void bfs(node*root){
	queue<node*>q;
	
	q.push(root);
	
	while(!q.empty()){
		node*s=q.front();
		q.pop();
		cout<<s->data<<' '<<s->weight<<endl;
		
		if(s->lchild!=NULL)q.push(s->lchild);
		if(s->rchild!=NULL)q.push(s->rchild);
	}
}
int main(){
	pair<char,int> d[8]={{'a',5},{'b',29},{'c',7},{'d',8},{'e',14},{'f',23},{'g',3},{'h',11}};
	
	for(auto i:d){
		node*s=new node;
		s->data=i.first;
		s->weight=i.second;
		s->lchild=s->rchild=NULL;
		q.push(s);
	}
	
	while(q.size()>1){
		node*s1=q.top();
		q.pop();
		node*s2=q.top();
		q.pop();
		node*s=mergeNode(s1,s2);
		q.push(s);
		
	}
	
	node* root=q.top();
	//cout<<root->weight;
	//cout<<root->data;
	dfs(root);
	//bfs(root);
	
	
 
	
	
}